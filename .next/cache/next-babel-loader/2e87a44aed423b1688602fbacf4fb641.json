{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { Grid, Badge } from \"components\";\nconst Project = styled.li.withConfig({\n  displayName: \"Projects__Project\",\n  componentId: \"sc-1ntx9q-0\"\n})([\"position:relative;.badge{position:absolute;right:8px;top:8px;}\"]);\n\nconst Projects = ({\n  projects = []\n}) => {\n  const renderBadge = url => {\n    const isVideo = url.includes(\".mp4\");\n\n    if (isVideo) {\n      return __jsx(Badge, {\n        className: \"badge\"\n      }, \"gif\");\n    } else {\n      return null;\n    }\n  };\n\n  const renderVideoOrPicture = url => {\n    const isVideo = url.includes(\".mp4\");\n    const Element = isVideo ? \"video\" : \"picture\";\n    const mimeType = isVideo ? \"video/mp4\" : \"image/png\";\n    const videoProps = isVideo ? {\n      autoPlay: true,\n      loop: true,\n      muted: true,\n      playsInline: true\n    } : null;\n    const style = {\n      width: \"100%\"\n    };\n    return isVideo ? __jsx(Element, _extends({}, videoProps, {\n      style: style\n    }), __jsx(\"source\", {\n      src: url,\n      type: mimeType\n    })) : __jsx(\"img\", {\n      style: style,\n      src: url,\n      alt: \"\"\n    });\n  };\n\n  return __jsx(Grid, null, projects.map(({\n    name,\n    liveVersionUrl,\n    thumb\n  }, index) => {\n    return __jsx(Project, {\n      key: index\n    }, __jsx(\"a\", {\n      href: liveVersionUrl,\n      style: {\n        display: \"block\"\n      }\n    }, renderBadge(thumb), renderVideoOrPicture(thumb)));\n  }));\n};\n\nexport default Projects;","map":{"version":3,"sources":["/home/tyler/Documents/tylerbenton/components/Projects/index.js"],"names":["React","styled","Grid","Badge","Project","li","Projects","projects","renderBadge","url","isVideo","includes","renderVideoOrPicture","Element","mimeType","videoProps","autoPlay","loop","muted","playsInline","style","width","map","name","liveVersionUrl","thumb","index","display"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,SAASC,IAAT,EAAeC,KAAf,QAA4B,YAA5B;AAEA,MAAMC,OAAO,GAAGH,MAAM,CAACI,EAAV;AAAA;AAAA;AAAA,sEAAb;;AAUA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,QAAQ,GAAG;AAAb,CAAD,KAAuB;AACtC,QAAMC,WAAW,GAAIC,GAAD,IAAS;AAC3B,UAAMC,OAAO,GAAGD,GAAG,CAACE,QAAJ,CAAa,MAAb,CAAhB;;AACA,QAAID,OAAJ,EAAa;AACX,aAAO,MAAC,KAAD;AAAO,QAAA,SAAS,EAAC;AAAjB,eAAP;AACD,KAFD,MAEO;AACL,aAAO,IAAP;AACD;AACF,GAPD;;AASA,QAAME,oBAAoB,GAAIH,GAAD,IAAS;AACpC,UAAMC,OAAO,GAAGD,GAAG,CAACE,QAAJ,CAAa,MAAb,CAAhB;AAEA,UAAME,OAAO,GAAGH,OAAO,GAAG,OAAH,GAAa,SAApC;AACA,UAAMI,QAAQ,GAAGJ,OAAO,GAAG,WAAH,GAAiB,WAAzC;AACA,UAAMK,UAAU,GAAGL,OAAO,GACtB;AACEM,MAAAA,QAAQ,EAAE,IADZ;AAEEC,MAAAA,IAAI,EAAE,IAFR;AAGEC,MAAAA,KAAK,EAAE,IAHT;AAIEC,MAAAA,WAAW,EAAE;AAJf,KADsB,GAOtB,IAPJ;AAQA,UAAMC,KAAK,GAAG;AACZC,MAAAA,KAAK,EAAE;AADK,KAAd;AAIA,WAAOX,OAAO,GACZ,MAAC,OAAD,eAAaK,UAAb;AAAyB,MAAA,KAAK,EAAEK;AAAhC,QACE;AAAQ,MAAA,GAAG,EAAEX,GAAb;AAAkB,MAAA,IAAI,EAAEK;AAAxB,MADF,CADY,GAKZ;AAAK,MAAA,KAAK,EAAEM,KAAZ;AAAmB,MAAA,GAAG,EAAEX,GAAxB;AAA6B,MAAA,GAAG,EAAC;AAAjC,MALF;AAOD,GAxBD;;AA0BA,SACE,MAAC,IAAD,QACGF,QAAQ,CAACe,GAAT,CAAa,CAAC;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,cAAR;AAAwBC,IAAAA;AAAxB,GAAD,EAAkCC,KAAlC,KAA4C;AACxD,WACE,MAAC,OAAD;AAAS,MAAA,GAAG,EAAEA;AAAd,OACE;AAAG,MAAA,IAAI,EAAEF,cAAT;AAAyB,MAAA,KAAK,EAAE;AAAEG,QAAAA,OAAO,EAAE;AAAX;AAAhC,OACGnB,WAAW,CAACiB,KAAD,CADd,EAEGb,oBAAoB,CAACa,KAAD,CAFvB,CADF,CADF;AAQD,GATA,CADH,CADF;AAcD,CAlDD;;AAoDA,eAAenB,QAAf","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { Grid, Badge } from \"components\";\n\nconst Project = styled.li`\n  position: relative;\n\n  .badge {\n    position: absolute;\n    right: 8px;\n    top: 8px;\n  }\n`;\n\nconst Projects = ({ projects = [] }) => {\n  const renderBadge = (url) => {\n    const isVideo = url.includes(\".mp4\");\n    if (isVideo) {\n      return <Badge className=\"badge\">gif</Badge>;\n    } else {\n      return null;\n    }\n  };\n\n  const renderVideoOrPicture = (url) => {\n    const isVideo = url.includes(\".mp4\");\n\n    const Element = isVideo ? \"video\" : \"picture\";\n    const mimeType = isVideo ? \"video/mp4\" : \"image/png\";\n    const videoProps = isVideo\n      ? {\n          autoPlay: true,\n          loop: true,\n          muted: true,\n          playsInline: true\n        }\n      : null;\n    const style = {\n      width: \"100%\"\n    };\n\n    return isVideo ? (\n      <Element {...videoProps} style={style}>\n        <source src={url} type={mimeType} />\n      </Element>\n    ) : (\n      <img style={style} src={url} alt=\"\" />\n    );\n  };\n\n  return (\n    <Grid>\n      {projects.map(({ name, liveVersionUrl, thumb }, index) => {\n        return (\n          <Project key={index}>\n            <a href={liveVersionUrl} style={{ display: \"block\" }}>\n              {renderBadge(thumb)}\n              {renderVideoOrPicture(thumb)}\n            </a>\n          </Project>\n        );\n      })}\n    </Grid>\n  );\n};\n\nexport default Projects;\n"]},"metadata":{},"sourceType":"module"}